{
  description = "ProxyConf";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs?ref=nixos-24.11";
    flake-utils.url = "github:numtide/flake-utils";
    devenv.url = "github:cachix/devenv";
  };

  outputs =
    { self
    , nixpkgs
    , flake-utils
    , devenv
    , ...
    } @ inputs:
    flake-utils.lib.eachDefaultSystem (system:
    let
      inherit (pkgs.lib) optional optionals;
      pkgs = import nixpkgs { inherit system; };
      elixir = beamPackages.elixir_1_18;
      beamPackages = pkgs.beam_minimal.packages.erlang_27.extend (self: super: {
        # this is required as buildMix commands generated by deps.nix use Elixir 1.17 (the default)
        buildMix = super.buildMix.override {
          elixir = elixir;
        };
      });

      run_ci = pkgs.writeShellScriptBin "run-ci" ''
        set -euxo pipefail
        export MIX_ENV=test
        cd $1
        ${elixir}/bin/mix deps.get
        ${elixir}/bin/mix format --check-formatted
        ${elixir}/bin/mix compile --warnings-as-errors
        ${elixir}/bin/mix test
      '';

      devenvShell = devenv.lib.mkShell {
        inherit inputs pkgs;
        modules = [
          ({ pkgs, config, ... }: {
            packages = [
              elixir
              pkgs.envoy
              pkgs.jq
              pkgs.zig
              pkgs.xz
              pkgs.hurl
              pkgs.websocat
              pkgs.docker-compose
              pkgs.python312Packages.mkdocs-material
              pkgs.python312Packages.pillow
              pkgs.python312Packages.cairosvg
              pkgs.python312Packages.mkdocs-rss-plugin
              pkgs.python312Packages.filelock
              run_ci
            ] ++ optional pkgs.stdenv.isLinux pkgs.inotify-tools
            ++ optional pkgs.stdenv.isDarwin pkgs.terminal-notifier;

            process.managers.process-compose = {
              tui.enable = false;
            };

            services.postgres = {
              enable = true;
              package = pkgs.postgresql_16;
              initialDatabases = [{
                name = "proxyconf_dev";
                pass = "postgres";
                user = "postgres";
              }
                {
                  name = "proxyconf_test";
                  pass = "postgres";
                  user = "postgres";
                }];
              initialScript = ''
                CREATE ROLE postgres SUPERUSER;
              '';
            };

            enterShell = ''
                              mkdir -p .nix-mix .nix-hex
                              export MIX_HOME=$PWD/.nix-mix
                              export HEX_HOME=$PWD/.nix-mix
                              # make hex from Nixpkgs available
                              # `mix local.hex` will install hex into MIX_HOME and should take precedence
                              export MIX_PATH="${beamPackages.hex}/lib/erlang/lib/hex/ebin"
                              export PATH=$MIX_HOME/bin:$HEX_HOME/bin:$PATH
                              ${elixir}/bin/mix local.hex --force
                              ${elixir}/bin/mix local.rebar --force
                              export LANG=C.UTF-8
                              # keep your shell history in iex
                              export ERL_AFLAGS="-kernel shell_history enabled"
                              echo "                                                                                               
                  _/_/_/                                              _/_/_/                          _/_/   
                 _/    _/  _/  _/_/    _/_/    _/    _/  _/    _/  _/          _/_/    _/_/_/      _/        
                _/_/_/    _/_/      _/    _/    _/_/    _/    _/  _/        _/    _/  _/    _/  _/_/_/_/     
               _/        _/        _/    _/  _/    _/  _/    _/  _/        _/    _/  _/    _/    _/          
              _/        _/          _/_/    _/    _/    _/_/_/    _/_/_/    _/_/    _/    _/    _/           
                                                           _/                                                
                                                      _/_/                                                   

              "
            '';

            enterTest = ''
              wait_for_port 5432 6u
              run-ci
            '';
          })
        ];
      };

    in
    {
      formatter = pkgs.nixpkgs-fmt;
      packages = {
        #default = pkg;
        #image = image;
        run_ci = run_ci;
        devenv-up = devenvShell.config.procfileScript;
        devenv-test = devenvShell.config.test;
      };
      devShells = {
        default = devenvShell;
      };
    }
    );
}
